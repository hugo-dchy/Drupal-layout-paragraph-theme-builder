<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

function layout_paragraph_theme_builder_theme_registry_alter(&$theme_registry) {

  $route_name = \Drupal::routeMatch()->getRouteName();
  $route_is_admin = \Drupal::service('router.admin_context')->isAdminRoute();

  // Just do that if the theme is 'admin' and the page is the add or edit node form.
  if($route_is_admin && ($route_name == 'entity.node.edit_form' || $route_name == 'node.add')) {

    $exceptions = [
      "block--local-tasks-block.html.twig",
      "breadcrumb.html.twig",
      "status-messages.html.twig",
    ];


    /**
     * @var \Drupal\Core\File\FileSystemInterface $file_system
     * */

    $file_system = \Drupal::service('file_system');
    $defaultThemeName = \Drupal::config('system.theme')->get('default');
    $theme_path = \Drupal::service('extension.list.theme')->getPath($defaultThemeName);
    $templates_path = $theme_path . '/templates';

    $files = $file_system->scanDirectory($templates_path, '/html.twig/', ['nomask' => "/layout/"]);

    foreach ($files as $file) {

      if(!in_array($file->filename, $exceptions)) {
        $templates_path = str_replace($file->filename, "", $file->uri);
        $template_file = str_replace(".html.twig", "", $file->filename);
        $template_name = str_replace("-", "_", $template_file);

        $theme_registry_base = explode("__", $template_name);


        isset($theme_registry[$theme_registry_base[0]]['render element']) ? $theme_registry[$template_name]['render element'] = $theme_registry[$theme_registry_base[0]]['render element'] : [];
        isset($theme_registry[$theme_registry_base[0]]['type']) ? $theme_registry[$template_name]['type'] = $theme_registry[$theme_registry_base[0]]['type'] : [];
        isset($theme_registry[$theme_registry_base[0]]['preprocess functions']) ? $theme_registry[$template_name]['preprocess functions'] = $theme_registry[$theme_registry_base[0]]['preprocess functions'] : [];

        $theme_registry[$template_name]['theme path'] = $theme_path;
        $theme_registry[$template_name]['template'] = $template_file;
        $theme_registry[$template_name]['path'] = $templates_path;
      }

    }

  }
}


function layout_paragraph_theme_builder_after_build(array $form)
{
  layout_paragraph_theme_builder_attach_lb_form($form);
  return $form;
}


function layout_paragraph_theme_builder_attach_lb_form(array &$form)
{
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#kwat_form'])) {
      $form[$child]['#kwat_form'] = TRUE;
    }
    layout_paragraph_theme_builder_attach_lb_form($form[$child]);
  }
}

function layout_paragraph_theme_builder_is_layout_builder_form_id($form_id, array $form)
{

  $form_ids = [
    'form-autocomplete',
    'media_image_edit_form',
    'media_library_add_form_oembed',
    'media_library_add_form_upload',
    'section_library_add_section_to_library',
    'section_library_add_template_to_library',
    'form-autocomplete',
    'editor_image_dialog',
    'node_page_builder_edit_form'
  ];
  $form_id_contains = [
    'views_form_media_library_widget_',
  ];

  foreach ($form_id_contains as $form_id_contain) {
    if (strpos($form_id, $form_id_contain) !== FALSE) {
      return TRUE;
    }
  }

  if (in_array($form_id, $form_ids)) {
    return TRUE;
  }

  if ($form_id === 'views_exposed_form' && isset($form['#id']) && $form['#id'] === 'views-exposed-form-media-library-widget') {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function layout_paragraph_theme_builder_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  if (layout_paragraph_theme_builder_is_layout_builder_form_id($form_id, $form)) {
    $form['#after_build'][] = 'layout_paragraph_theme_builder_after_build';
    $form['#kwat_form'] = TRUE;
  }
}
